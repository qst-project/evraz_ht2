version: '2'
services:
  # front:
  #     build:
  #       context: frontend
  #       dockerfile: Dockerfile
  #     command: npm run --port 8080
  #     stdin_open: true
  #     ports:
  #       - "8080:8080"
  #     environment:
  #       - PORT=8080
  #       - HOST=0.0.0.0

  rest-backend:
    container_name: monolith
    build:
      context: backend
      dockerfile: Dockerfile
    network_mode: host
    depends_on:
      - backend-postgres

  backend-postgres:
    container_name: postgres
    image: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: changeme
      POSTGRES_DB: evraz
      PGDATA: /data/postgres
    volumes:
      - ./backend/postgres-data:/data/postgres
    ports:
      - "5432:5432"

  metrics:
    container_name: metrics
    build:
      context: metrics
      dockerfile: Dockerfile
    ports:
      - "2112:2112"

  prometheus:
    image: prom/prometheus:v2.37.0
    container_name: prometheus
    user: root
    volumes:
      - ./metrics/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./metrics/prometheus/prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--web.enable-admin-api'
      - '--web.listen-address=:9099'
    network_mode: host

  data_prediction_service:
    container_name: data_prediction_service
    build:
      context: data_prediction_service
      dockerfile: Dockerfile
    ports:
      - "8765:8765"
    network_mode: host

networks:
  postgres:
    driver: bridge
